<script src="//maps.google.com/maps/api/js?v=3.23&key=AIzaSyDR5pZb3x_z86wNwysHQMISWDxiX1P_9eM"></script>
<script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
<script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script> <!-- only if you need custom infoboxes -->
<%= binding.pry %>
<div>
  <div id="map" style='width: 600px; height: 400px; margin-top: 0.5cm; margin-left: 243px; display:inline-block;'></div>
  <% class_init_route = @state == 0 ? "hide" : "btn btn-default" %>
  <div id="button_route" style="float: right; padding: 163px 135px 1px 1px; ">
    <%= button_to "Iniciar nueva ruta", pet_new_route_path, :class => class_init_route, :method => :get %>
  </div>
</div>

<script type="text/javascript">

$(document).ready(function () {
  // will call refreshPartial every 5 seconds
  var myVar = setInterval(refreshPartial, 5000)
  if (<%= @state %> == 1) {
    clearInterval(myVar);
    print_map(<%= @points_locations %>);
  }
  
  function refreshPartial() {
    $.ajax({
      type: "GET",
      dataType: "json",
      url: '/pets/<%= @pet_id %>/routes',
      success: function(data) {
        print_map(data.points_locations);
        alert(data.walks);
        if (data.state == 1) {
          alert("hola");
          clearInterval(myVar);
          print_map(data.points_locations);
        }
      }
    })
  }

  function print_map(points_locations) {
    handler = Gmaps.build('Google');
    var mapOptions = { mapTypeId: google.maps.MapTypeId.HYBRID };
    handler.buildMap({ provider: mapOptions, internal: {id: 'map'}}, function(){
      var plan = points_locations;//<%= @points_locations %>;
      plan.options = {
        geodesic: true,
        strokeColor: '#FF0000',
        strokeOpacity: 1.0,
        strokeWeight: 2,
        title: 'plan'
      };

      function addPolyline(polyline) {
        var transformedPolyline = _.map(polyline, function(coordinates) {
          return {
            lat: coordinates[0],
            lng: coordinates[1]
          };
        })
        handler.addPolyline(transformedPolyline, polyline.options);
        handler.bounds.extend(transformedPolyline[0]);
        handler.bounds.extend(polyline[polyline.length - 1]);
      }
      addPolyline(plan);

      markers = handler.addMarkers(<%= raw @hash.to_json %>);
      
      handler.map.centerOn(markers[0]); 
      // to set the map zoom
      handler.getMap().setZoom(15);

      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
    });
  }
});
</script>